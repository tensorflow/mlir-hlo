/* Copyright 2025 The OpenXLA Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
==============================================================================*/

#include "MlirBuilder.h"

#include "mlir/IR/Location.h"
#include "mlir/IR/Value.h"
#include "mlir/IR/ValueRange.h"
#include "mlir/Support/LLVM.h"

namespace mlir {

// Region Builder APIs

MlirOp Argument(RegionBuilder& rb, Type type) {
  return MlirOp(rb, rb.getRegion().addArgument(type, rb.getLoc()));
}

// Builtin Dialect Generated Builders

Location UnknownLoc(MlirBuilder& builder) {
  return UnknownLoc::get(&builder.getContext());
}
Location FileLineColLoc(MlirBuilder& builder, StringRef filename, unsigned line,
                        unsigned col) {
  return FileLineColLoc::get(&builder.getContext(), filename, line, col);
}

Value unwrap(MlirOp const& value) { return value.getValue(); }

SmallVector<Value> unwrap(ArrayRef<MlirOp> values) {
  SmallVector<Value> ret;
  ret.reserve(values.size());
  for (MlirOp const& value : values) {
    ret.push_back(unwrap(value));
  }
  return ret;
}

SmallVector<MlirOp> wrap(MlirBuilder& builder, ValueRange values) {
  SmallVector<MlirOp> ret;
  ret.reserve(values.size());
  for (Value const& value : values) {
    ret.emplace_back(builder, value);
  }
  return ret;
}

MlirOp swap(MlirBuilder& builder, MlirOp& value) {
  return MlirOp(builder, value.getValue());
}

}  // namespace mlir

// The following can be autogenerated
